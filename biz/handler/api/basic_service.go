// Code generated by hertz generator.

package api

import (
	"context"

	api "github.com/Asong6824/douyin-micro-gateway/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/Asong6824/douyin-micro-gateway/biz/rpc"
	"github.com/Asong6824/douyin-micro-gateway/kitex_gen/user"
	"github.com/Asong6824/douyin-micro-gateway/pkg/errno"
	"github.com/Asong6824/douyin-micro-gateway/pkg/utils"
	pkgapp "github.com/Asong6824/douyin-micro-gateway/pkg/app"
)

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	var resp api.UserRegisterResponse
	err = c.BindAndValidate(&req)
	if err != nil {
		pkgapp.SendFailResponse(c, errno.ParamErr)
		return
	}
	rpcResp, err := rpc.Register(ctx, &user.RegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	resp.StatusCode = rpcResp.Base.Code
	resp.StatusMsg = &rpcResp.Base.Msg
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}
	token, err := utils.CreateToken(rpcResp.UserId)
	if err != nil {
		pkgapp.SendFailResponse(c, errno.ParamErr)
		return
	}
	resp.UserID = rpcResp.UserId
	resp.Token = token
	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserLoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
